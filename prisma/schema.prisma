// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id              Int                 @id @default(autoincrement())
  credits         Int                 @default(100)
  email           String              @unique
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  firebase_userid String?             @unique
  applications    IndeedApplication[]
  questions       Questions[]
  userDetails     UserResume[]
  fingerprint     String?             @unique
  tokens          Token[]
}

model Token {
  id        Int      @id @default(autoincrement())
  token     String   @db.LongText()
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
  verified  Boolean  @default(false)

  @@index([userId])
}

enum ApplicationStatus {
  STARTED
  COMPLETED
  ERROR
}

model IndeedApplication {
  id             Int               @id @default(autoincrement())
  userId         Int
  user           User              @relation(fields: [userId], references: [id])
  jobDesc        String            @db.Text
  title          String
  employer       String
  status         ApplicationStatus @default(STARTED)
  applicationUrl String            @db.MediumText
  errors         Error[]           @relation("ApplicationErrors")
  questions      Questions[]       @relation("ApplicationQuestions")
  coverLetter    CoverLetter?      @relation("ApplicationCoverLetter")
  createdAt      DateTime          @default(now())

  @@index([userId])
}

model Error {
  id            Int                @id @default(autoincrement())
  message       String
  applicationId Int?
  application   IndeedApplication? @relation("ApplicationErrors", fields: [applicationId], references: [id])
  createdAt     DateTime           @default(now())

  @@index([applicationId])
}

model Questions {
  id            Int                @id @default(autoincrement())
  userId        Int
  user          User               @relation(fields: [userId], references: [id])
  applicationId Int?
  application   IndeedApplication? @relation("ApplicationQuestions", fields: [applicationId], references: [id])
  platform      String
  data          Json
  ai_answer     Json?
  user_answer   String?
  createdAt     DateTime           @default(now())

  @@index([userId])
  @@index([applicationId])
}

model CoverLetter {
  id            Int                @id @default(autoincrement())
  applicationId Int?               @unique
  application   IndeedApplication? @relation("ApplicationCoverLetter", fields: [applicationId], references: [id])
  letter        String             @db.Text
  createdAt     DateTime           @default(now())
}

model UserResume {
  id          Int       @id @default(autoincrement())
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  resume_name String
  details     Json
  createdAt   DateTime  @default(now())
  resume_url  String?
  uploaded_at DateTime?
  file_id     String?   @unique // Google Storage object name
}
